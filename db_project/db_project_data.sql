/*
SQL Data Definition File

Case Study Data Requirements

Each Burger Shack restaurant has
(unique numeric restarant ID, address, phone number)

Customers who wish to book a table can book
(online, by phone, or in person)

Customers must provide the folllowing information to book a table
(name, address, email address, age [must be over 18])

Customers are assigned
(unique ID)

The main customer making the booking is assigned a booking receipt which includes
(booking ID number, time of table booking, number of people at table
[cannot be more than 6 people, table cannot be booked for more than 2 hours])

A customer can have many bookings but each booking is for one customer.
(many to one)

Each table (restaurant) has
(unique number, type of table[2, 4, 6 and 8 seater], locations[window or interior])

Details of each person other than the main guest must be assigned
(table number, name, email address, phone number)

details of waiter and manager must also be record in a seperate record
(unique ID, name, address, phone number, email address[must end in @burgershack.com],
date of birth, start date of employment)

Customers will be fined if they stay longer than the 2 hour max time limit.
A penalty bill is sent which is calculated as 5 euro per minute that they
overstayed beyond the time limit.
*/

-- Generated by Oracle SQL Developer Data Modeler 21.2.0.183.1957
--   at:        2021-12-11 20:49:22 GMT
--   site:      Oracle Database 12c
--   type:      Oracle Database 12c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE
DROP TABLE customerbooking;
DROP TABLE employmentdetails;
DROP TABLE restaurant;
DROP TABLE restauranttable;
DROP TABLE bookingreceipt;
DROP TABLE customer;






CREATE TABLE bookingreceipt (
    bookid        NUMBER(7) NOT NULL,
    numberofcust  NUMBER(7),
    bookingtime   DATE,
    timeduration  NUMBER(7),
    durationspent NUMBER(7),
    bookbill      FLOAT(7)
)
LOGGING;

ALTER TABLE bookingreceipt ADD CONSTRAINT numbercust_chk CHECK ( numberofcust <= 6 );

ALTER TABLE bookingreceipt ADD CONSTRAINT time_chk CHECK ( timeduration <= '120' );

ALTER TABLE bookingreceipt ADD CONSTRAINT bookingreceipt_pk PRIMARY KEY ( bookid );

CREATE TABLE customer (
    custid          NUMBER(7) NOT NULL,
    tableid         NUMBER(7),
    custname        VARCHAR2(30),
    custaddress     VARCHAR2(30),
    custphonenumber VARCHAR2(30)
)
LOGGING;

ALTER TABLE customer ADD CONSTRAINT customer_pk PRIMARY KEY ( custid );

CREATE TABLE customerbooking (
    bcustid          NUMBER(7) NOT NULL,
    bcustnum         NUMBER(7),
    bcustaddress     VARCHAR2(30),
    bcustname        VARCHAR2(30),
    bcustemail       VARCHAR2(30),
    bcustage         NUMBER(3),
    numberofbookings NUMBER(7) NOT NULL,
    customer_custid  NUMBER(7) NOT NULL,
    bookingtype      VARCHAR2(30)
)
LOGGING;

ALTER TABLE customerbooking ADD CONSTRAINT bcustage_chk CHECK ( bcustage > 18 );

ALTER TABLE customerbooking ADD CONSTRAINT bcustemail_chk CHECK ( bcustemail LIKE '%@%.com' );

ALTER TABLE customerbooking ADD CONSTRAINT customerbooking_pk PRIMARY KEY ( bcustid );

ALTER TABLE customerbooking ADD CONSTRAINT bcustemail_uniq UNIQUE ( bcustemail );

CREATE TABLE employmentdetails (
    empid          NUMBER(7) NOT NULL,
    empname        VARCHAR2(30),
    empaddress     VARCHAR2(30),
    empphoneno     VARCHAR2(30),
    empemail       VARCHAR2(30),
    empdateofbirth DATE,
    startdate      DATE
)
LOGGING;

ALTER TABLE employmentdetails ADD CONSTRAINT empemail_chk CHECK ( empemail LIKE '%@burgershack.com' );

ALTER TABLE employmentdetails ADD CONSTRAINT employmentdetails_pk PRIMARY KEY ( empid );

CREATE TABLE restaurant (
    restid      NUMBER(7) NOT NULL,
    restaddress VARCHAR2(30),
    restphoneno VARCHAR2(30)
)
LOGGING;

ALTER TABLE restaurant ADD CONSTRAINT restaurant_pk PRIMARY KEY ( restid );

CREATE TABLE restauranttable (
    tableid         NUMBER(7) NOT NULL,
    tabletype       VARCHAR2(30),
    tablelocation   VARCHAR2(30),
    customer_custid NUMBER(7) NOT NULL
)
LOGGING;

ALTER TABLE restauranttable ADD CONSTRAINT restauranttable_pk PRIMARY KEY ( tableid );

ALTER TABLE customerbooking
    ADD CONSTRAINT customerbooking_customer_fk FOREIGN KEY ( customer_custid )
        REFERENCES customer ( custid )
    NOT DEFERRABLE;

ALTER TABLE restauranttable
    ADD CONSTRAINT restauranttable_customer_fk FOREIGN KEY ( customer_custid )
        REFERENCES customer ( custid )
    NOT DEFERRABLE;

CREATE OR REPLACE VIEW customerInfo ( custid, custname ) AS
SELECT custid, custname FROM customer
UNION
SELECT bcustid, bcustname FROM customerbooking 
;



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             6
-- CREATE INDEX                             0
-- ALTER TABLE                             14
-- CREATE VIEW                              1
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- TSDP POLICY                              0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0


--INSERT STATEMENTS

-- bookingreceipt
INSERT INTO bookingreceipt
(bookid, numberofcust, bookingtime, timeduration, durationspent, bookbill)
VALUES (1, 2, TO_DATE('14:00', 'HH24:MI'),120, 120, 80.50);

INSERT INTO bookingreceipt
(bookid, numberofcust, bookingtime, timeduration, durationspent, bookbill)
VALUES (2, 4, TO_DATE('16:00', 'HH24:MI'), 90, 90, 110.50);

INSERT INTO bookingreceipt
(bookid, numberofcust, bookingtime, timeduration, durationspent, bookbill)
VALUES (3, 4, TO_DATE('18:00', 'HH24:MI'), 60, 120, 115.50);

INSERT INTO bookingreceipt
(bookid, numberofcust, bookingtime, timeduration, durationspent, bookbill)
VALUES (4, 6, TO_DATE('20:00', 'HH24:MI'),  30, 60,  180.00);

INSERT INTO bookingreceipt
(bookid, numberofcust, bookingtime, timeduration, durationspent, bookbill)
VALUES (5, 2, TO_DATE('12:00', 'HH24:MI'),  120, 150,  55.80);

-- employmentdetails
INSERT INTO employmentdetails
 (empid, empname, empaddress, empphoneno, empemail, empdateofbirth, startdate)
VALUES (1, 'John Barnes', '27 Red Road','0871234567', 'jbarnes@burgershack.com',
TO_DATE('30/10/1998', 'DD/MM/YYYY'),  TO_DATE('21/09/2019', 'DD/MM/YYYY'));
 
 INSERT INTO employmentdetails
(empid, empname, empaddress, empphoneno, empemail, empdateofbirth, startdate)
VALUES (2, 'John Harvey', '26 Orange Object',
 '0872345678', 'jharvey@burgershack.com',
TO_DATE('15/05/1989', 'DD/MM/YYYY'), TO_DATE('24/11/2021', 'DD/MM/YYYY'));
 
 INSERT INTO employmentdetails
(empid, empname, empaddress, empphoneno, empemail, empdateofbirth, startdate)
VALUES (3, 'John Grisham', '25 Yellow Yard',
 '0873456789', 'jgrisham@burgershack.com',
TO_DATE('18/08/2000', 'DD/MM/YYYY'), TO_DATE('19/09/2021', 'DD/MM/YYYY'));
 
 INSERT INTO employmentdetails
(empid, empname, empaddress, empphoneno, empemail, empdateofbirth, startdate)
VALUES (4, 'John Lewis', '24 Green Greens',
 '0874567890', 'jlewis@burgershack.com',
TO_DATE('9/04/1996', 'DD/MM/YYYY'), TO_DATE('12/06/2017', 'DD/MM/YYYY'));
 
 INSERT INTO employmentdetails
(empid, empname, empaddress, empphoneno, empemail, empdateofbirth, startdate)
VALUES (5, 'John Johnson', '23 Blue Boulevard',
 '0875678901', 'jj@burgershack.com',
TO_DATE('6/02/1988', 'DD/MM/YYYY'), TO_DATE('30/05/2011', 'DD/MM/YYYY'));
 

-- restaurant
INSERT INTO restaurant (restid, restaddress, restphoneno)
VALUES (1, '67 Alice Avenue', '08779777711');

INSERT INTO restaurant (restid, restaddress, restphoneno)
VALUES (2, '76 Indigo Island', '08339333322');

INSERT INTO restaurant (restid, restaddress, restphoneno)
VALUES (3, '56 Wonder Walkway', '08559555533');

INSERT INTO restaurant (restid, restaddress, restphoneno)
VALUES (4, '10 Downing Street', '08997999944');

INSERT INTO restaurant (restid, restaddress, restphoneno)
VALUES (5, '27 Pearse Street', '08119111155');

-- customer
INSERT INTO customer
(custid, tableid, custname, custaddress, custphonenumber)
VALUES (1, 1, 'John Smith', '64 Zoo Lane', '0834566575');

INSERT INTO customer
(custid, tableid, custname, custaddress, custphonenumber)
VALUES (2, 2, 'Smith Row', '33 Wallaby Way', '0875677686');

INSERT INTO customer
(custid, tableid, custname, custaddress, custphonenumber)
VALUES (3, 3, 'Albert Camus', '24 The View', '0835435464');

INSERT INTO customer
(custid, tableid, custname, custaddress, custphonenumber)
VALUES (4, 4, 'Marcel Proust', '21 Jump Street', '0872344354');

INSERT INTO customer
(custid, tableid, custname, custaddress, custphonenumber)
VALUES (5, 5, 'Ernst Hemmingway', '32 The Arm', '0836788797');

-- restaurant table
INSERT INTO restauranttable (tableid, tabletype, tablelocation, customer_custid)
VALUES (1, '2 seater', 'Window', '1');

INSERT INTO restauranttable (tableid, tabletype, tablelocation, customer_custid)
VALUES (2, '4 seater', 'Interior', '2');

INSERT INTO restauranttable (tableid, tabletype, tablelocation, customer_custid)
VALUES (3, '6 seater', 'Window', '3');

INSERT INTO restauranttable (tableid, tabletype, tablelocation, customer_custid)
VALUES (4, '8 seater', 'Interior', '4');

INSERT INTO restauranttable (tableid, tabletype, tablelocation, customer_custid)
VALUES (5, '2 seater', 'Window', '5');

-- customerbooking
INSERT INTO customerbooking
(bcustid, bcustnum, bcustaddress, bcustname,
 bcustemail, bcustage, numberofbookings, customer_custid, bookingtype)
VALUES (1, 1, '64 Zoo Lane', 'John Smith', 'jsmith@gmail.com', 23, 1, 1, 'Online');

INSERT INTO customerbooking
(bcustid, bcustnum, bcustaddress, bcustname,
 bcustemail, bcustage, numberofbookings, customer_custid, bookingtype)
VALUES (2, 2, '33 Wallaby Way', 'Smith Row', 'smitharesenal@gmail.com', 20, 2, 2,
'Phone');

INSERT INTO customerbooking
(bcustid, bcustnum, bcustaddress, bcustname,
 bcustemail, bcustage, numberofbookings, customer_custid, bookingtype)
VALUES (3, 3, '24 The View', 'Albert Camus', 'acamus@gmail.com', 32, 3, 3,
'In Person');

INSERT INTO customerbooking
(bcustid, bcustnum, bcustaddress, bcustname,
 bcustemail, bcustage, numberofbookings, customer_custid, bookingtype)
VALUES (4, 4, '21 Jump Street', 'Marcel Proust', 'mproust@gmail.com', 43, 4, 4,
'Online');

INSERT INTO customerbooking
(bcustid, bcustnum, bcustaddress, bcustname,
 bcustemail, bcustage, numberofbookings, customer_custid, bookingtype)
VALUES (5, 5, '32 The Arm', 'Ernst Hemmingway', 'ehemmingway@gmail.com', 53, 5, 5,
'Online');

--QUERIES DECLARED
UPDATE bookingreceipt 
SET bookbill= bookbill+(5*30)
WHERE durationspent
IN
(SELECT durationspent FROM bookingreceipt 
WHERE durationspent > 120)
AND bookid = 5;

SELECT bookbill,
CASE
	WHEN bookbill > 50 THEN 0.90*bookbill
	WHEN bookbill > 100 THEN 0.70*bookbill
	WHEN bookbill > 150 THEN 0.50*bookbill
	ELSE bookbill
	END AS "DISCOUNT_PRICE"
FROM bookingreceipt;

SELECT bookid, avg(bookbill) FROM bookingreceipt
INNER JOIN customerbooking ON bookid = bcustid
GROUP BY bookid
ORDER BY bookid ASC;

SELECT custid, custname FROM customer LEFT OUTER JOIN customerbooking
ON custid = bcustid;

SELECT tableid, tablelocation FROM restauranttable RIGHT OUTER JOIN customer
USING (tableid);

SELECT custid, custname FROM customer
UNION
SELECT bcustid, bcustname FROM customerbooking;

SELECT custid, custname FROM customer
INTERSECT
SELECT bcustid, bcustname FROM customerbooking;

DROP VIEW customerInfo;

CREATE VIEW customerInfo
AS SELECT custid, custname FROM customer
UNION
SELECT bcustid, bcustname FROM customerbooking;


